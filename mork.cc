#define __MAKEMORE_MORK_CC__ 1
#include "mork.hh"

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include <string>

#include "partrait.hh"

namespace makemore {

const uint8_t mork_rgb[32 * 48 * 3] = {
32,32,32,32,32,32,3,4,100,111,52,18,94,61,79,82,7,5,26,122,99,18,18,105,23,55,21,21,120,18,106,58,53,80,15,92,104,106,8,12,52,108,111,108,71,34,91,42,11,98,8,18,21,112,116,87,103,106,70,14,99,34,40,73,94,25,17,81,31,61,11,44,127,34,118,59,35,86,41,88,95,51,104,59,43,89,2,90,89,97,102,66,45,79,63,126,32,32,32,32,32,32,77,45,125,79,120,33,83,123,2,24,71,99,92,73,113,76,29,22,93,112,97,65,0,37,115,51,5,96,14,97,46,84,124,59,102,114,40,92,108,118,8,51,69,55,100,80,77,94,85,2,21,93,17,0,126,36,111,71,126,33,66,84,72,91,38,98,1,114,28,122,78,110,24,116,22,68,80,6,55,81,17,38,76,77,31,99,69,6,47,94,32,32,32,32,32,32,54,27,42,94,84,44,72,18,101,35,52,89,77,5,72,113,106,80,29,53,52,72,71,114,77,71,49,43,9,3,13,42,14,124,55,48,54,87,106,106,125,66,60,55,43,10,6,20,25,4,66,37,95,109,44,58,118,36,68,26,21,31,67,20,60,110,68,18,14,71,108,27,106,90,99,113,105,26,39,75,3,3,22,18,12,19,94,104,55,25,91,11,64,97,44,47,87,76,32,89,63,54,86,108,52,114,125,97,112,1,2,108,21,49,77,122,110,77,91,57,118,23,121,88,52,124,44,40,46,30,66,37,10,52,14,61,77,32,120,7,41,19,56,23,55,0,23,75,47,58,102,35,115,26,18,121,126,100,36,109,47,77,2,100,34,33,22,121,113,26,30,47,94,34,76,113,93,19,27,80,94,12,32,59,28,121,19,62,105,112,96,18,15,37,26,121,25,82,116,63,31,111,69,103,119,110,60,30,59,127,4,4,107,62,12,51,13,18,0,125,42,79,74,51,30,25,90,63,100,125,102,0,101,102,91,52,81,58,114,4,114,10,71,51,56,117,81,68,53,17,127,63,18,124,60,71,105,85,97,66,101,121,34,92,99,57,118,11,86,21,45,70,26,125,106,31,35,72,70,56,50,87,116,95,87,32,11,6,8,107,70,84,20,46,65,40,118,76,108,17,78,89,6,37,17,86,53,73,30,12,60,108,1,90,120,57,31,28,74,16,19,86,110,101,104,97,76,71,46,35,74,15,74,19,66,116,119,52,14,38,93,51,38,8,121,105,117,23,100,75,106,22,64,87,88,56,64,26,118,108,110,28,47,109,59,108,32,75,126,111,13,106,113,93,97,117,47,117,0,0,0,0,0,0,255,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,127,127,127,127,127,127,255,255,255,255,255,0,255,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,127,0,255,127,0,0,127,0,0,127,0,127,0,0,127,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,127,0,127,0,255,0,255,255,0,0,0,255,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,127,127,127,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,255,255,255,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,0,255,0,255,255,255,0,255,0,255,255,255,0,255,0,255,255,255,0,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,255,0,127,255,0,127,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,255,255,255,0,0,0,255,255,255,0,0,0,255,255,255,0,0,0,0,255,0,0,255,0,0,0,0,255,255,255,0,0,0,255,0,127,255,255,255,255,255,255,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,127,127,127,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,255,255,255,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,0,0,255,0,0,255,255,255,0,127,127,0,0,127,0,0,0,255,0,255,0,0,255,0,255,255,0,255,255,0,0,255,0,0,127,0,255,255,255,127,127,127,255,255,0,255,255,0,255,255,0,0,127,0,0,0,255,0,0,127,127,0,127,127,127,0,255,0,127,255,0,127,255,127,0,255,127,0,255,255,255,255,255,255,127,127,0,127,127,0,255,0,0,255,0,0,0,0,255,0,0,255,255,255,0,127,127,0,0,127,0,0,0,255,0,255,0,0,255,0,255,255,0,255,255,0,0,255,0,0,127,0,255,255,255,127,127,127,255,255,0,255,255,0,255,255,0,0,127,0,0,0,255,0,0,127,127,0,127,127,127,0,255,0,127,255,0,127,255,127,0,255,127,0,255,255,255,255,255,255,0,0,0,0,0,0,127,0,0,127,0,0,0,0,255,0,0,255,255,255,0,127,127,0,0,0,255,0,127,0,0,127,0,0,127,0,255,255,0,127,127,0,0,255,0,0,127,0,255,255,255,127,127,127,127,127,0,127,127,0,0,127,0,0,127,0,0,0,255,0,0,127,127,0,127,127,0,127,255,0,127,255,0,127,127,127,0,255,127,0,127,127,127,127,127,127,255,255,0,255,255,0,127,0,127,0,0,255,255,0,0,255,0,0,255,127,0,255,0,0,255,127,0,255,255,0,0,0,255,0,0,255,0,127,0,0,255,0,0,255,255,0,255,255,255,0,0,0,255,0,255,255,0,255,255,0,127,0,127,255,255,0,127,127,127,0,255,0,255,255,255,0,0,0,0,255,0,127,127,127,127,0,127,127,0,127,0,0,0,0,0,0,255,255,0,255,255,0,127,0,127,0,0,255,255,0,0,255,0,0,255,127,0,255,0,0,255,127,0,255,255,0,0,0,255,0,0,255,0,127,0,0,255,0,0,255,255,0,255,255,255,0,0,0,255,0,255,255,0,255,255,0,127,0,127,255,255,0,127,127,127,0,0,0,255,255,255,255,255,255,0,0,0,127,127,127,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,255,255,0,0,0,255,127,0,127,255,0,0,127,0,0,255,0,0,255,127,0,255,255,0,255,127,0,0,0,127,0,0,127,0,255,0,0,255,0,0,255,255,0,255,255,0,255,0,255,0,0,0,127,0,0,127,0,255,255,0,127,0,127,127,127,127,0,0,0,0,0,0,255,255,255,0,0,0,127,127,127,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,0,0,0,0,255,0,0,255,255,255,0,127,127,0,0,127,0,0,0,255,0,255,0,0,255,0,255,255,0,255,255,0,0,255,0,0,127,0,255,255,255,127,127,127,255,255,0,255,255,0,255,255,0,0,127,0,0,0,255,0,0,127,127,0,127,127,127,0,255,0,127,255,0,127,255,127,0,255,127,0,255,255,255,255,255,255,0,0,0,0,0,0,127,0,0,127,0,0,0,0,255,0,0,255,255,255,0,127,127,0,0,0,255,0,127,0,0,127,0,0,127,0,255,255,0,127,127,0,0,255,0,0,127,0,255,255,255,127,127,127,127,127,0,127,127,0,0,127,0,0,127,0,0,0,255,0,0,127,127,0,127,127,0,127,255,0,127,255,0,127,127,127,0,255,127,0,127,127,127,127,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,127,0,0,255,255,255,0,0,0,0,0,0,255,127,127,127,0,0,0,0,0,0,1,35,99,17,61,48,255,255,0,255,255,0,127,0,127,0,0,255,255,0,0,255,0,0,255,127,0,255,0,0,255,127,0,255,255,0,0,0,255,0,0,255,0,127,0,0,255,0,0,255,255,0,255,255,255,0,0,0,255,0,255,255,0,255,255,0,127,0,127,255,255,0,127,127,127,0,0,0,255,255,0,0,0,0,0,0,0,127,127,127,255,255,0,255,255,0,31,35,9,98,57,39,255,255,0,255,255,0,0,0,255,127,0,127,255,0,0,127,0,0,255,0,0,255,127,0,255,255,0,255,127,0,0,0,127,0,0,127,0,255,0,0,255,0,0,255,255,0,255,255,0,255,0,255,0,0,0,127,0,0,127,0,255,255,0,127,0,127,127,127,127,0,0,0,255,255,0,0,0,0,0,0,0,127,127,127,0,0,0,0,0,0,107,26,123,96,91,70,42,59,48,58,66,92,18,91,12,33,39,80,113,30,122,125,113,15,18,124,85,87,89,76,79,96,52,97,34,97,11,31,101,15,47,63,16,11,68,40,8,76,67,5,85,16,13,66,96,126,87,97,55,26,104,19,113,120,24,124,64,105,7,103,18,126,125,65,0,103,91,37,109,12,17,104,57,56,116,71,95,10,0,80,11,1,125,61,102,4,127,12,27,35,73,22,116,27,109,50,123,75,22,82,87,32,88,72,51,95,118,97,88,120,85,98,12,87,49,50,103,85,94,70,76,16,85,6,26,53,73,91,52,47,27,65,108,29,104,21,74,22,90,44,62,118,30,73,38,115,112,75,79,1,33,124,93,76,122,104,106,1,61,93,20,16,66,50,57,119,73,108,42,2,120,123,44,122,101,99,26,33,49,101,100,96,117,100,89,107,124,118,103,81,51,40,57,51,120,41,84,14,102,24,120,34,42,21,30,16,70,20,93,114,5,7,112,52,127,30,7,36,69,55,81,118,69,80,44,79,92,54,28,37,13,62,43,20,11,1,61,85,125,80,107,61,38,78,69,109,106,120,126,13,59,15,47,82,117,82,44,78,68,54,100,124,117,26,16,5,59,56,37,98,11,77,41,66,112,39,73,48,62,105,30,100,47,79,2,58,14,109,78,87,51,85,19,32,46,90,69,51,28,23,92,65,101,10,17,61,117,113,101,104,25,92,97,10,103,17,14,86,48,105,61,87,93,84,105,121,109,90,47,108,105,46,127,117,5,1,123,35,111,34,18,16,22,92,34,89,94,114,70,57,25,11,50,2,34,118,34,108,102,102,56,20,104,109,53,105,66,70,116,23,14,26,63,36,82,45,126,5,89,57,87,13,43,48,77,52,72,105,80,42,114,80,122,74,53,127,87,59,123,19,13,86,48,117,45,43,85,37,47,100,102,123,97,67,99,97,12,107,104,61,73,65,25,42,7,1,32,115,82,114,107,6,17,17,65,33,104,123,105,28,44,27,42,76,11,34,94,41,34,88,11,120,74,102,85,68,107,26,14,48,121,87,20,46,14,5,29,1,34,24,13,116,4,2,49,60,6,70,42,98,37,41,50,57,102,25,103,63,16,39,40,36,99,15,71,53,2,104,93,6,32,58,95,63,64,119,20,104,1,64,122,97,29,89,50,41,54,60,7,45,119,37,51,4,82,108,116,67,110,82,76,75,75,42,34,40,127,96,97,57,41,122,54,102,2,121,90,18,108,53,3,86,16,22,12,73,20,18,125,12,52,5,97,2,34,88,77,95,87,112,112,102,13,25,8,126,77,17,90,74,113,105,7,110,50,64,26,8,122,41,33,39,113,73,17,102,6,58,112,110,70,28,24,35,55,73,57,109,73,25,51,77,2,8,106,52,27,18,2,102,61,103,29,70,5,2,50,119,124,36,122,110,50,108,108,80,69,38,111,80,126,15,88,53,77,117,12,57,124,94,64,46,115,67,109,2,44,22,123,76,74,15,55,78,0,73,26,36,31,127,77,13,44,10,61,85,95,120,85,85,81,95,88,48,99,65,25,87,82,55,26,6,111,106,3,59,48,93,34,2,45,77,14,53,50,40,64,83,112,85,38,43,64,85,89,68,105,100,126,27,122,87,84,0,83,76,62,51,32,101,120,15,61,76,30,25,28,47,115,50,53,51,101,85,36,18,20,11,55,103,31,91,99,60,122,71,40,84,122,13,11,108,92,46,68,10,70,48,52,18,121,55,84,74,120,100,64,41,63,37,10,124,90,34,24,75,6,85,18,53,41,94,15,67,37,65,36,116,98,52,10,77,19,42,20,12,19,113,112,69,40,30,84,9,83,76,112,13,119,102,74,90,90,112,125,31,117,100,73,111,43,14,67,98,124,40,65,4,95,96,126,86,48,116,18,62,103,70,102,37,63,87,11,16,72,66,121,80,35,53,41,39,107,39,29,6,69,77,36,98,9,125,35,111,98,61,126,68,17,94,16,127,7,89,15,37,121,75,37,115,88,69,2,45,105,28,92,29,107,68,49,84,82,41,92,32,74,29,88,49,123,115,112,12,22,36,73,67,43,91,107,55,117,10,18,100,78,115,93,42,106,88,58,101,18,0,111,92,40,50,4,46,74,15,19,89,126,6,102,106,117,83,9,59,74,86,82,7,95,101,78,97,27,12,11,118,0,33,6,64,55,40,79,42,21,68,67,8,35,5,90,105,90,91,63,4,23,111,117,57,6,100,124,68,127,63,81,15,28,106,12,52,54,76,55,3,78,89,27,110,96,62,25,64,16,77,112,80,93,107,107,14,16,50,102,87,12,112,122,44,63,3,95,108,19,0,121,95,16,60,89,124,31,23,56,54,60,77,112,92,3,40,31,60,58,26,33,123,63,69,23,12,66,127,35,55,85,15,6,0,20,18,94,62,71,19,0,42,30,106,7,54,8,95,21,11,65,19,101,46,0,6,66,70,126,49,96,104,55,79,120,14,35,50,70,71,43,93,113,86,28,26,123,113,113,65,20,97,110,5,56,6,44,3,28,61,91,5,27,57,70,10,91,30,92,50,101,39,67,70,108,15,3,103,118,19,31,95,36,51,47,34,8,49,5,7,102,47,9,80,78,69,55,90,23,92,55,26,6,104,113,21,52,58,24,120,52,57,46,34,99,116,78,19,110,103,77,24,80,83,35,15,118,119,64,101,121,24,65,75,6,56,114,50,103,56,104,39,41,13,88,81,66,45,101,89,23,71,95,103,65,18,114,124,117,28,53,75,1,41,66,119,40,119,51,72,37,106,106,53,101,125,66,125,17,121,79,118,119,30,120,62,122,52,106,107,89,29,74,16,104,36,116,63,70,90,51,116,53,19,105,13,106,9,18,70,19,99,34,57,102,39,123,105,70,110,20,111,40,59,54,97,86,47,71,28,57,101,10,71,21,92,124,82,27,113,112,37,12,33,99,16,64,71,111,93,69,70,17,42,125,117,60,17,125,89,32,33,10,123,52,69,39,92,37,104,102,71,87,104,92,112,74,120,67,112,86,47,1,85,28,81,103,71,65,108,76,125,55,66,85,105,71,70,40,59,118,23,36,68,94,114,91,77,51,36,38,49,113,71,22,84,103,124,56,1,11,34,66,39,29,96,55,51,116,110,34,77,41,58,13,37,20,8,72,5,94,58,118,42,62,45,44,12,87,50,97,88,48,77,87,47,35,65,52,84,32,60,94,26,53,18,18,115,33,106,123,45,99,24,93,40,23,117,86,70,59,96,61,83,31,110,105,40,38,69,64,5,98,57,9,13,17,64,99,50,121,91,105,79,55,15,92,36,84,13,62,73,93,38,127,114,6,126,41,30,24,42,38,108,74,15,94,96,124,114,30,0,45,29,48,14,20,0,41,63,1,11,50,87,15,112,52,125,5,55,67,123,120,64,50,13,57,73,59,31,5,110,86,109,101,114,61,0,21,110,2,86,54,83,11,79,84,55,5,64,125,127,4,127,9,27,22,7,110,34,79,114,67,84,77,37,47,114,112,26,123,57,74,93,32,68,16,27,6,68,95,26,30,48,115,82,14,21,44,63,51,28,99,12,28,116,12,40,19,30,119,118,44,42,63,125,55,35,80,53,29,107,9,32,19,7,5,85,7,99,41,43,68,32,23,120,112,32,74,74,79,42,31,13,45,89,97,67,8,95,1,24,39,110,75,97,44,76,13,84,55,88,127,120,25,107,81,90,99,3,99,66,60,113,18,102,98,2,74,77,2,63,93,54,45,80,40,79,29,88,85,27,69,23,84,81,116,43,1,120,9,2,127,56,18,60,82,59,54,15,29,68,36,78,123,41,96,49,56,83,83,86,124,24,76,69,4,45,101,24,61,69,108,42,35,21,111,52,79,59,22,113,113,40,27,16,40,28,35,126,125,11,127,7,71,50,28,105,67,8,71,54,27,101,16,19,96,19,115,89,98,114,98,32,110,87,53,115,11,62,45,80,51,12,119,10,25,90,16,21,45,91,81,21,54,56,46,13,2,37,43,76,25,127,36,61,57,84,75,25,107,34,26,15,48,94,108,4,101,85,91,88,118,96,111,118,43,40,121,22,112,19,44,42,123,84,87,56,54,25,23,112,100,110,108,93,76,62,2,40,0,59,57,20,46,19,117,8,29,107,61,9,26,126,101,32,107,53,54,91,119,119,64,0,29,74,6,57,98,74,127,80,124,1,100,42,89,17,22,0,84,122,74,84,104,65,45,62,97,83,108,25,120,114,90,72,25,94,94,25,75,6,43,2,26,119,13,77,65,70,47,88,18,17,102,91,33,77,100,88,56,35,50,27,103,82,122,43,92,83,33,97,58,14,77,102,47,122,54,29,120,119,42,52,84,16,37,17,119,31,32,52,22,39,77,7,75,39,76,84,25,49,52,4,93,41,97,73,8,60,90,125,83,32,119,74,47,26,115,79,48,58,52,80,29,40,63,36,30,111,74,18,113,65,126,63,3,105,39,116,21,104,121,98,23,90,30,58,97,45,104,117,41,114,84,70,87,114,122,61,62,82,104,65,21,37,62,116,46,10,31,118,8,41,39,21,33,49,63,96,81,42,70,12,25,21,92,92,11,34,69,101,19,10,29,16,112,1,120,37,126,40,116,88,12,34,92,16,31,49,97,110,63,88,4,60,80,110,23,15,105,14,38,91,82,113,112,51,85,78,49,53,118,38,114,102,115,112,111,58,65,43,0,70,105,17,101,117,34,89,9,107,105,89,97,126,45,112,50,97,41,8,3,95,85,31,68,27,123,70,10,110,10,85,43,72,93,105,72,110,4,70,69,5,66,8,49,39,99,94,119,74,72,98,25,79,61,50,5,30,35,36,123,41,74,103,106,38,58,84,25,42,73,41,56,6,33,66,6,25,38,23,28,99,50,87,97,18,87,49,66,9,105,62,35,10,43,0,61,42,79,31,67,126,90,44,68,20,94,11,82,127,50,28,46,49,42,18,49,48,56,76,79,74,78,35,63,95,50,112,80,39,107,13,90,80,115,112,96,52,60,78,86,124,53,23,49,101,19,42,47,103,67,6,97,47,28,59,102,66,28,37,46,39,81,13,90,45,107,101,70,91,15,125,104,86,65,51,51,13,59,67,98,82,50,14,69,90,60,105,13,21,99,85,14,66,86,123,40,36,124,22,52,53};



Mork::Mork(const std::string &pngfn, unsigned int _scale) {
  scale = _scale;

  Partrait prt;
  prt.load(pngfn);
  assert(prt.w == scale * 16 * 2);
  assert(prt.h == scale * 16 * 3);

  rgb = new uint8_t[prt.w * prt.h * 3];
  memcpy(rgb, prt.rgb, prt.w * prt.h * 3);
}

Mork::~Mork() {
  delete[] rgb;
}

void Mork::print(const std::string &txt, Partrait *out, bool chop) {
  int x = 0, y = 0;
  int qx = 0, qy = 0;
  unsigned int n = txt.length();

  for (unsigned int i = 0; i < n; ++i) {
    if (txt[i] == '\n') {
      qx = 0;
      ++qy;
    } else {
      ++qx;
    }
    if (qx > x)
      x = qx;
    if (qy > y)
      y = qy;
  }
  ++y;
  assert(x > 0 && y > 0);

  int w, h;
  w = x * 2 * scale;
  h = y * 3 * scale;

  uint8_t *orgb;
  if (chop) {
    h -= scale;
  }
  out->create(w, h);

  int dchop = 0;
  if (chop)
    dchop = -w * 3 * scale;

  x = 0;
  y = 0;

  for (unsigned int i = 0; i < n; ++i) {
    uint8_t c = txt[i];
    if (c == '\n') {
      y += 3 * scale;
      x = 0;
      continue;
    }

    int cx = 2 * (int)(c % 16);
    int cy = 3 * (int)(c / 16);

    for (int dy = 0; dy < 3; ++dy) {
      if (chop && y == 0 && dy == 0)
        continue;
      for (int dx = 0; dx < 2; ++dx) {
        for (int q = 0; q < 3; ++q) {

          for (unsigned int ay = 0; ay < scale; ++ay) {
            for (unsigned int ax = 0; ax < scale; ++ax) {
              int ry = y + dy * scale + ay;
              int rx = x + dx * scale + ax;

              int zy = (cy + dy) * scale + ay;
              int zx = (cx + dx) * scale + ax;
             
              out->rgb[ry * w * 3 + rx * 3 + q + dchop] =
                rgb[zy * 16 * scale * 2 * 3 + zx * 3 + q];
            }
          }

        }
      }
    }

    x += 2 * scale;
  }
}

}
