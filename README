makemore is a neural synthesizer written in C++ and CUDA with minimal
dependencies.

peaple is a collaborative synthesis application based on makemore.

You can make up a nom and it will generate a new parson using neural
networks.  Then you can choose a different parson to bread it with,
creating a new parson by recombining the parens' attributes.  You can
modify any parson's target image directly in the super-resolution
editor, and the controls will automatically adjust to represent it.
If the neural network's control space can't represent your edits you
can burn them in to make it learn, also changing permanently how all
new parsons are generated.

A parson can have up to 16 frens.  This is a simple mechanism for
navigation, discovery, and workspace organization.  For example, you
can click the image of any parson in the fren list to populate the
frenbuf with their nom, then the bread button will bread your parson
with that fren.

The nom seeds random attributes and controls which are fed into
the first stage producing an 8x8 image.  That image along with the
same attributes and new random controls are fed into the second stage
yielding high-frequency components which are added back to the 8x8 input
to produce a 16x16 output, etc., up to the fourth stage (64x64).

The super-resolution editor supports stage-level target and control locks.
For example, you can swap backgrounds by setting a target with the 8x8
controls unlocked and all others locked.  Or replace finer details by
unlocking only the higher-stage controls.

Each super-resolution stage consists of two neural networks called an
encoder-generator or encgen pair.  The encoder learns to map an image and
its attributes to a control vector, and the generator learns to map the
attributes and the controls back to the original image.  The composition
of both networks (encgen) is trained as an identity function giving
faithful control vectors for target images.

Recombining two control vectors means creating a new control vector where
each element is copied from one of the two paren control vectors chosen
at random.  The odds in this choice are given by a dominance function
dom(x) = 1-4*(1/2-x)^2 applied to the control vector value (which lies
between 0 and 1).  For example, if one paren has control value 1/4,
and the other paren has control value 1/2, the probability of inheriting
the first paren's value is dom(1/4)/(dom(1/4)+dom(1/2)) = (3/4)/(3/4+1)
= 3/7.  By this mechanism, dominant controls (those near 1/2) are more
likely to be inherited than recessive controls (those near 0 or near 1).

The encoder-generator network is also composed in the other direction,
as a generator-encoder.  In this configuration genenc is also trained
as an identity function, mapping controls to controls.  genenc is then
presented with recombined faithful controls from two different randomly
chosen training sample parens.  This is recombinative conditioning.
