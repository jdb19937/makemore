Morescript is a programming language interpreted by a neural network
(called the generator).

Instead of a plain bag-of-words vector representation, which requires a
fixed vocabulary, makemore uses hashbags.  An arbitrary word is hashed
to multiple components in the hashbag vector, like a Bloom filter.
The encoding is independent of the vocabulary, so there's no need
to specify which words we are using.

The generator receives input and produces output in shibboleth format.
A shibboleth is a pair of hashbags, one uniform and the other weighted by
position in the word list.  The first hashbag is used for reconstruction
of the word bag (by cosine similarity with vocabulary words), the second
hashbag is used as a comparator to sort the list.  Decoding a shibboleth
requires a vocabulary, but the encoding is fixed relative to the
hyper-parameters.

The generator is trained from rules, which are pairs of clauses
(word lists) separated by "->", for example:

	hello how are you -> hi i am fine
	goodbye -> bye

Any words with a "$" prefix are variables.  They are substituted with
random values during training, in a consistent fashion.  This allows
for rules that teach the generator to copy parts of the input to the
output, for example:

	echo $x -> $x
	swap $x $y -> $y $x

Variables can be constrained to take values from a particular set of
words.  These classes are defined using the "-:" operator, like this:

	animal -: cat dog horse mouse
	plant  -: tomato horseradish catnip

To constrain a variable to a class, prefix it with the class name and ":",
like this:

	my pet is a $animal:pet -> nice i have a cat
	my pet is a $plant:pet  -> are you also a plant

A rule can be weighted by appending "x" and a number to the arrow.
This causes it to be entered into the training bag that many times.
Example:

	$x ->x4 i dont understand $x

Comments are marked by "#".

That's all there is to the language.  A morescript is a list of
rules and definitions.  Each rule is compiled to a pair of shibboleths.
Each definition is compiled to hashbags.  The positions of
the variables within the clauses are also included, allowing
substitutions to be performed.  The generator is then trained
from the compiled morescript.

Interaction is via a separate program called the interpreter
which is equipped with a callback to the generator.  The simplest
interpreter echoes the generator output.  Here is a more useful
one in Perl that interprets a syntax for recursing into the generator:

	https://peaple.io/Morescript.pm

I've been able to train a generator to add and subtract numbers up
to three digits using the above interpreter and the following morescript:

	https://peaple.io/script.txt
