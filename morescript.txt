Morescript is a programming language interpreted by a neural network
(called the generator).

The generator receives input and produces output in shibboleth
format, an improved bag-of-words that preserves ordering.
Decoding a shibboleth requires a vocabulary (a list of possible
words), but the encoding is fixed relative to the hyper-parameters.

The generator is trained from rules, which are pairs of word lists
separated by "->", for example:

	hello how are you -> hi i am fine
	goodbye -> bye

Any tokens with a "$" prefix are substituted with random values during
training, in a consistent fashion.  This allows for rules that teach
the generator to copy parts of the input to the output, for example:

	echo $x -> $x
	swap $x $y -> $y $x

That's all there is to the language.  A morescript is a list of
rules, and each rule is compiled to a pair of shibboleths.  The
offsets of any substitution variables are stored in a separate
vector, so the substitution can be performed without recompilation.
The generator is then trained from the compiled morescript.

Interaction is via a separate program called the interpreter which
has a callback to the generator.  A simple interpreter simply echoes
the generator output.  Here is a more useful one in Perl that
allows for re-evaluation of the output, subroutine calls, and
packing/unpacking of characters: 

	https://github.com/jdb19937/makemore/blob/master/Morescript.pm

I've been able to train the generator to add and subtract numbers up
to three digits using the above interpreter and the following morescript:

	# increment a one-digit number
	inc 0 -> 1
	inc 1 -> 2
	inc 2 -> 3
	inc 3 -> 4
	inc 4 -> 5
	inc 5 -> 6
	inc 6 -> 7
	inc 7 -> 8
	inc 8 -> 9
	inc 9 -> 10
	
	# increment a two-digit number
	inc $x $y ->x8 % $x !2 inc $y
	inc $x  9 ->x8 % !2 inc $x 0
	inc  9  9 ->   100
	
	# increment a three-digit number
	inc $x $y $z ->x8 % $x !3 inc $y $z
	inc $x  9  9 ->x8 % !2 inc $x 00
	
	# increment any number
	inc $x          ->x4 !! inc @ $x
	
	
	# decrement a one-digit number
	dec 1 -> 0
	dec 2 -> 1
	dec 3 -> 2
	dec 4 -> 3
	dec 5 -> 4
	dec 6 -> 5
	dec 7 -> 6
	dec 8 -> 7
	dec 9 -> 8
	
	# decrement a two-digit number
	dec $x $y ->x8 % $x !2 dec $y
	dec $x  0 ->x8 % !2 dec $x 9
	dec 1   0 ->   9
	
	# decrement a three-digit number
	dec $x $y $z ->x8 % $x !3 dec $y $z
	dec $x  0  0 ->x8 % !2 dec $x 99
	dec 1   0  0 ->   99
	
	# decrement any number
	dec $x          ->x4 !! dec @ $x
	
	# add two numbers recursively
	$x + $y ->x4 !! !2 inc $x + !2 dec $y
	$x + 0 -> $x
	
	# subtract two numbers recursively
	$x - $y ->x4 !! !2 dec $x - !2 dec $y
	$x - 0 -> $x
