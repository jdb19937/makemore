#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
moretran
\end_layout

\begin_layout Author
Dan Brumleve
\end_layout

\begin_layout Date
February 28, 2019
\end_layout

\begin_layout Section
overview
\end_layout

\begin_layout Standard
Moretran is a language for training a neural network with text.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
A moretran script is a list of rules separated by newlines.
 The simplest kind of rule is two lists of words separated by 
\begin_inset Quotes eld
\end_inset

->
\begin_inset Quotes erd
\end_inset

, for example:
\end_layout

\begin_layout LyX-Code
hello how are you -> hi i am fine
\end_layout

\begin_layout LyX-Code
goodbye -> bye
\end_layout

\begin_layout Standard
A special word is "*" which is substituted with a random word during training,
 giving it the effect of a wildcard:
\end_layout

\begin_layout LyX-Code
* is for dinner -> yum
\end_layout

\begin_layout Standard
The first clause of the rule can be a semicolon-separated list, representing
 the history of a thread:
\end_layout

\begin_layout LyX-Code
whats your name ; * whats yours -> bob
\end_layout

\begin_layout LyX-Code
* whats yours -> whats my what
\end_layout

\begin_layout Standard
The second clause of the rule can also be a semicolon-separated list, representi
ng multiple outputs:
\end_layout

\begin_layout LyX-Code
tell me a joke -> okay ; what does the fox say
\end_layout

\begin_layout Standard
A rule can be prefixed by a list of tags and a 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

.
 Tags can be used to represent different actors or properties, for example:
\end_layout

\begin_layout LyX-Code
bob : whats your name ; * whats yours -> bob
\end_layout

\begin_layout LyX-Code
sam : whats your name ; * whats yours -> sam
\end_layout

\begin_layout LyX-Code
bob : whos your best friend -> sam
\end_layout

\begin_layout LyX-Code
sam : whos your best friend -> bob
\end_layout

\begin_layout Standard
A rule can be weighted by appending 
\begin_inset Quotes eld
\end_inset

x
\begin_inset Quotes erd
\end_inset

 and a number to the arrow.
 This causes it to be entered into the training bag that many times.
 Example:
\end_layout

\begin_layout LyX-Code
* ->x4 i dont understand
\end_layout

\begin_layout Standard
Comments are marked by 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
* ->x4 i dont understand # fallback response
\end_layout

\begin_layout Standard
That's all there is to the language.
 A moretran script is a list of rules.
 Each rule is compiled to shibboleths.
 The positions of the wildcards within the clauses are also included, allowing
 substitutions to be performed.
 The neural network is then trained from the compiled moretran code.
\end_layout

\begin_layout Section
tools
\end_layout

\begin_layout Standard
moretran scripts can be compiled with the moretran utility.
 Example:
\end_layout

\begin_layout LyX-Code
$ moretran -o test.more test.txt
\end_layout

\begin_layout Section
Example
\end_layout

\begin_layout Example
This moretran script defines the behavior of a bully.
 If you send him a message, he responds with a threat, and initiates a countdown.
 The countdown is interrupted if you pay him, otherwise he vandalizes your
 profile image.
 The substitution variables 
\begin_inset Quotes eld
\end_inset

$nom
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\backslash
1
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\backslash
2
\begin_inset Quotes erd
\end_inset

, etc.
 are interpreted by the application, not moretran itself.
\end_layout

\begin_layout LyX-Code
# threaten
\end_layout

\begin_layout LyX-Code
bully : from * * -> tag $nom bullying ; to 
\backslash
2 gimme money or get a black eye ; count 
\backslash
2 0
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# count
\end_layout

\begin_layout LyX-Code
bully bullying : count * 0 -> to 
\backslash
2 imma count to three ; count 
\backslash
2 1
\end_layout

\begin_layout LyX-Code
bully : count * 0 ->
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
bully bullying : count * 1 -> to 
\backslash
2 one pay me ; count 
\backslash
2 2
\end_layout

\begin_layout LyX-Code
bully : count * 1 ->
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
bully bullying : count * 2 -> to 
\backslash
2 two else imma hit you ; count 
\backslash
2 3
\end_layout

\begin_layout LyX-Code
bully : count * 2 ->
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
bully bullying : count * 3 -> to 
\backslash
2 three thats it buddy ; punch 
\backslash
2 ; untag $nom bullying
\end_layout

\begin_layout LyX-Code
bully : count * 3 ->
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
# paid
\end_layout

\begin_layout LyX-Code
bully bullying : paid by * * -> untag $nom bullying ; to 
\backslash
3 thanks buddy
\end_layout

\begin_layout LyX-Code
bully : paid by * * -> untag $nom bullying ; to 
\backslash
3 thanks buddy
\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
